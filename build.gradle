apply plugin: "java"

sourceCompatibility = 1.8
sourceSets.main.java.srcDirs = [ "src/" ]
sourceSets.main.resources.srcDirs = [ "res/" ]
sourceSets.test.java.srcDirs = [ ]
sourceSets.test.resources.srcDirs = [ ]

buildscript {
    repositories {
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    }
}

allprojects {
    apply plugin: "java"

    version = '1.0'
    ext {
        appName = "Jamepad"
    }

    repositories {
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://oss.sonatype.org/content/repositories/releases/" }
    }

    dependencies {
        compile files('libs/jamepad-natives.jar')
        compile "com.badlogicgames.gdx:gdx-jnigen:1.7.2"
    }
}

task runTester(dependsOn: classes, type: JavaExec) {
    main = 'com.studiohartman.jamepad.ControllerTester'
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
}

task linuxNatives(dependsOn: classes, type: JavaExec) {
    main = 'com.studiohartman.jamepad.JamepadNativesBuild'
    args = ['build-linux']
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
}

task windowsNatives(dependsOn: classes, type: JavaExec) {
    main = 'com.studiohartman.jamepad.JamepadNativesBuild'
    args = ['build-windows']
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
}

task OSXNatives(dependsOn: classes, type: JavaExec) {
    main = 'com.studiohartman.jamepad.JamepadNativesBuild'
    args = ['build-OSX']
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
}

task allNatives(dependsOn: classes, type: JavaExec) {
    main = 'com.studiohartman.jamepad.JamepadNativesBuild'
    args = ['build-linux', 'build-windows', 'build-OSX']
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
}

task dist(dependsOn: classes, type: Jar) {
    from files(sourceSets.main.output.classesDir)
    from files(sourceSets.main.output.resourcesDir)
    from {configurations.compile.collect {zipTree(it)}}

    manifest {}
}
